
SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_VERSION 1)
SET(CMAKE_C_COMPILER_WORKS 1)
SET(CMAKE_CXX_COMPILER_WORKS 1)

if (BUILD_TYPE STREQUAL "AYM_HARDWARE")
    if (UNIX)
        SET(CMAKE_C_COMPILER "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-gcc")
        SET(CMAKE_CXX_COMPILER "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-g++")
        SET(ARM_SIZE "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-size")
        SET(ARM_OBJDUMP "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-objdump")
        SET(ARM_OBJCOPY "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-objcopy")
    elseif (WIN32)
        SET(CMAKE_C_COMPILER "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-gcc.exe")
        SET(CMAKE_CXX_COMPILER "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-g++.exe")
        SET(ARM_SIZE "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-size.exe")
        SET(ARM_OBJDUMP "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-objdump.exe")
        SET(ARM_OBJCOPY "${TOOLCHAIN_BIN_PATH}/arm-none-eabi-objcopy.exe")
    endif ()
elseif (BUILD_TYPE STREQUAL "AYM_SOFT")
    if (UNIX)
        SET(CMAKE_C_COMPILER "gcc")
        SET(CMAKE_CXX_COMPILER "g++")
        SET(ARM_SIZE "size")
        SET(ARM_OBJDUMP "objdump")
        SET(ARM_OBJCOPY "objcopy")
    elseif (WIN32)
        SET(CMAKE_C_COMPILER "gcc.exe")
        SET(CMAKE_CXX_COMPILER "g++.exe")
        SET(ARM_SIZE "size.exe")
        SET(ARM_OBJDUMP "objdump.exe")
        SET(ARM_OBJCOPY "objcopy.exe")
    endif ()
else ()
    message(FATAL_ERROR "Variable BUILD TYPE is not set!")
endif ()

SET(MC_HARDWARE_FLAGS "-mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16")

SET(MEM_LD "${CMAKE_CURRENT_SOURCE_DIR}/startup/ld/mem.ld")
SET(SECTIONS_LD "${CMAKE_CURRENT_SOURCE_DIR}/startup/ld/sections.ld")

SET(C_COMPILER_FLAGS "-std=gnu99 -fshort-enums")
SET(MC_LD_FLAGS "--specs=nano.specs -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-u,vfprintf -lm -u _printf_float -u _scanf_float -T ${MEM_LD} -T ${SECTIONS_LD} -nostartfiles")

SET(COMPILER_OPTIMIZATION "-O0 -g3")

SET(CMAKE_C_FLAGS "${MC_HARDWARE_FLAGS} -fdata-sections -ffunction-sections -Wl,--gc-sections ${COMPILER_OPTIMIZATION} ${C_COMPILER_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS "${MC_HARDWARE_FLAGS} -fdata-sections -ffunction-sections -Wl,--gc-sections ${COMPILER_OPTIMIZATION} ${MC_LD_FLAGS}")