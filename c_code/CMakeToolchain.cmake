SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_VERSION 1)
SET(CMAKE_C_COMPILER_WORKS 1)
SET(CMAKE_CXX_COMPILER_WORKS 1)

if (CMAKE_BUILD_TYPE STREQUAL "HARD")
    SET(CMAKE_C_COMPILER "${TOOLCHAIN_BIN_PATH}arm-none-eabi-gcc")
    SET(CMAKE_CXX_COMPILER "${TOOLCHAIN_BIN_PATH}arm-none-eabi-g++")
    SET(SIZE "${TOOLCHAIN_BIN_PATH}arm-none-eabi-size")
    SET(OBJDUMP "${TOOLCHAIN_BIN_PATH}arm-none-eabi-objdump")
    SET(OBJCOPY "${TOOLCHAIN_BIN_PATH}arm-none-eabi-objcopy")
elseif (CMAKE_BUILD_TYPE STREQUAL "SOFT")
    SET(CMAKE_C_COMPILER "gcc")
    SET(CMAKE_CXX_COMPILER "g++")
    SET(SIZE "size")
    SET(OBJDUMP "objdump")
    SET(OBJCOPY "objcopy")
else ()
    message(FATAL_ERROR "Variable BUILD TYPE is not set!")
endif ()

SET(C_COMPILER_FLAGS "-std=gnu99")
SET(COMPILER_OPTIMIZATION "-O0 -g3")

if (CMAKE_BUILD_TYPE STREQUAL "HARD")
    SET(MC_HARDWARE_FLAGS "-mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16")

    SET(MEM_LD "${CMAKE_CURRENT_SOURCE_DIR}/bsp/mc_hardware/startup/ld/mem.ld")
    SET(SECTIONS_LD "${CMAKE_CURRENT_SOURCE_DIR}/bsp/mc_hardware/startup/ld/sections.ld")

    SET(MC_LD_FLAGS "--specs=nano.specs -specs=nosys.specs -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-u,vfprintf -lm -u _printf_float -u _scanf_float -T ${MEM_LD} -T ${SECTIONS_LD} -nostartfiles")

    SET(CMAKE_C_FLAGS "${MC_HARDWARE_FLAGS} -fdata-sections -ffunction-sections -Wl,--gc-sections ${COMPILER_OPTIMIZATION} ${C_COMPILER_FLAGS}")

    SET(CMAKE_EXE_LINKER_FLAGS "${MC_HARDWARE_FLAGS} -fdata-sections -ffunction-sections -Wl,--gc-sections ${COMPILER_OPTIMIZATION} ${MC_LD_FLAGS} -Wl,--print-memory-usage")
    # SET(CMAKE_EXE_LINKER_FLAGS "${MC_HARDWARE_FLAGS} -fdata-sections -ffunction-sections -Wl,--gc-sections ${COMPILER_OPTIMIZATION} ${MC_LD_FLAGS} -Wl,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map")
elseif (CMAKE_BUILD_TYPE STREQUAL "SOFT")
    SET(CMAKE_C_FLAGS "-m32 ${COMPILER_OPTIMIZATION} -fdata-sections -ffunction-sections -Wl,--gc-sections  ${C_COMPILER_FLAGS}")
    SET(CMAKE_EXE_LINKER_FLAGS "-m32 -fdata-sections -ffunction-sections -Wl,--gc-sections ${COMPILER_OPTIMIZATION}")
    option(TRACE_FUNCTIONS "Trace function calls using instrument-functions")
    if (TRACE_FUNCTIONS)
        add_definitions(-DTRACE_FUNCTIONS)
        SET(GCC_COVERAGE_COMPILE_FLAGS "-finstrument-functions")
        target_compile_options(FreeRTOS_Emulator PUBLIC ${GCC_COVERAGE_COMPILE_FLAGS})
    endif (TRACE_FUNCTIONS)
endif ()
