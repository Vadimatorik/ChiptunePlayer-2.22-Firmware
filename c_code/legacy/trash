/*
this->cfg->mcu->gpio->pwr.allPwr->reset();

this->cfg->l->sendMessage( RTL_TYPE_M::INIT_OK, "MakiseGui started." );
this->cfg->pcb->sd->getStatus() != EC_SD_STATUS::NOINIT )


	/// Громкость.
	

	///ayplayerEqualizer									eq;

	//AyPlayerFatFs										fat;
	
	/// Значения эквалайзера (цифровых потенциометров).
/// 0..26 диапазон каждого поля.

struct __attribute__((packed)) ayplayerEqualizer {
	uint8_t			A1;
	uint8_t			B1;
	uint8_t			C1;
	uint8_t			A2;
	uint8_t			B2;
	uint8_t			C2;
};

const ayplayerEqualizer ayplayerEqualizerDafault = {
	.A1			=	230,
	.B1			=	200,
	.C1			=	230,
	.A2			=	230,
	.B2			=	200,
	.C2			=	230,
};




	/// Забираем начальные значения потенциометров.
	memcpy( &this->eq, &ayplayerEqualizerDafault, sizeof( ayplayerEqualizer ) );



void Base::initEqualizer (	void	) {
	this->cfg->pcb->dp->setValue( 0, 2, this->eq.A1 );
	this->cfg->pcb->dp->setValue( 0, 0, this->eq.B1 );
	this->cfg->pcb->dp->setValue( 0, 1, this->eq.C1 );
	this->cfg->pcb->dp->setValue( 0, 3, this->eq.A2 );
	this->cfg->pcb->dp->setValue( 1, 0, this->eq.B2 );
	this->cfg->pcb->dp->setValue( 1, 1, this->eq.C2 );
}

void Base::volumeSet ( const uint8_t left, const uint8_t right ) {
	this->cfg->pcb->dp->setValue( 1, 2, left );			// Левый наушник.
	this->cfg->pcb->dp->setValue( 1, 3, right );			// Правый.
}

void Base::setValueEqualizer (	void	) {
	switch( this->g.currentSlider ) {
	case 0:							/// A1.
		this->cfg->pcb->dp->setValue( 0, 2, this->eq.A1 );
		break;
	case 1:							/// B1.
		this->cfg->pcb->dp->setValue( 0, 0, this->eq.B1 );
		break;
	case 2:							/// C1.
		this->cfg->pcb->dp->setValue( 0, 1, this->eq.C1 );
		break;
	case 3:							/// A2.
		this->cfg->pcb->dp->setValue( 0, 3, this->eq.A2 );
		break;
	case 4:							/// B2.
		this->cfg->pcb->dp->setValue( 1, 0, this->eq.B2 );
		break;
	case 5:							/// C2.
		this->cfg->pcb->dp->setValue( 1, 1, this->eq.C2 );
		break;
	}
}


#define TASK_UP_DOWN_BUTTON 1000

static StaticTask_t task_up_down_button_buf;
static StackType_t task_up_down_button_stack[TASK_UP_DOWN_BUTTON];

#define AY_DIP_28_PIN_INDEX 0
#define AY_DIP_40_PIN_INDEX 1


#include "ff.h"

/*

DIR d = {0};
FILINFO f_info = {0};
FIL fa = {0};*/

//uint8_t read_psg_test[1024*1];

static void task_up_down_button (void *p) {
    p = p;
    int rv = 0;

 /*
    sr_set_pin_ay_1_res();
    sr_reset_pin_pwr_ay_1_on();
    set_pin_pwr_5_v();
    sr_set_pin_pwr_ay_1_on();
    sr_reset_pin_ay_1_res();
    clear_aym_hardware();
    dp_reset_shdn();

    ltc6903_start();
    ltc6903_set_requency(1.77e6, LTC6903_OUTPUT_MODE_CLK_ON_INV_OFF);

    aym_psg_reset();
*/
    while (1) {
        /*
         * if ((rv = dp_set_a1(255)) != 0) { // 0 - отключить звук.
                  while(1);
              }

              if ((rv = dp_set_b1(255)) != 0) {
                  while(1);
              }

              if ((rv = dp_set_c1(255)) != 0) {
                  while(1);
              }

              if ((rv = dp_set_a2(0)) != 0) {
                  while(1);
              }

              if ((rv = dp_set_b2(0)) != 0) {
                  while(1);
              }

              if ((rv = dp_set_c2(0)) != 0) {
                  while(1);
              }

              if ((rv = dp_set_l(255)) != 0) {
                  while(1);
              }

              if ((rv = dp_set_r(255)) != 0) {
                  while(1);
              }*/


        /*
        UINT rlen = 0;
        fr = f_read(&fa, read_psg_test, sizeof(read_psg_test), &rlen);

        if (fr != FR_OK) {
            while (1);
        };

        aym_psg_play(AY_DIP_28_PIN_INDEX, read_psg_test, rlen);

        if (rlen < sizeof(read_psg_test)) {
            break;
        }


    }
    aym_psg_reset();


    fr = f_close(&fa);
*/

    }
}